Subject: [PATCH] Solution by Andrii Kurta
---
Index: expenses/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/expenses/forms.py b/expenses/forms.py
--- a/expenses/forms.py	(revision 0c37ce300837c7a3f691c1177680aa0ae908c0c3)
+++ b/expenses/forms.py	(revision 551db2262edc96dfbdf669d431cf51619cbb6f6f)
@@ -1,8 +1,24 @@
 from django import forms
-from .models import Expense
+from .models import Expense, Category
 
 
 class ExpenseSearchForm(forms.ModelForm):
+    date_from = forms.DateField(
+        required=False,
+        widget=forms.TextInput(attrs={'type': 'date'})
+        )
+
+    date_to = forms.DateField(
+        required=False,
+        widget=forms.TextInput(attrs={'type': 'date'})
+        )
+
+    category = forms.ModelMultipleChoiceField(
+        queryset=Category.objects.all(),
+        required=False,
+        widget=forms.CheckboxSelectMultiple,
+    )
+
     class Meta:
         model = Expense
         fields = ('name',)
Index: expenses/templates/expenses/category_list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/expenses/templates/expenses/category_list.html b/expenses/templates/expenses/category_list.html
--- a/expenses/templates/expenses/category_list.html	(revision 0c37ce300837c7a3f691c1177680aa0ae908c0c3)
+++ b/expenses/templates/expenses/category_list.html	(revision 551db2262edc96dfbdf669d431cf51619cbb6f6f)
@@ -1,12 +1,13 @@
 {% extends "base.html" %}
 
 {% block content %}
-<a href="{% url 'expenses:category-create' %}">add</a>
+<a href="{% url 'expenses:category-create' %}">add category</a>
 
-<table border="1">
+<table border="1" style="text-align: center;">
 	<thead>
 		<tr>
 			<th>name</th>
+      <th>number of expenses</th>
 			<th>actions</th>
 		</tr>
 	</thead>
@@ -16,6 +17,9 @@
       <td>
 				{{obj.name}}
 			</td>
+      <td>
+        {{ obj.num_expenses }}
+      </td>
 			<td>
         <a href="{% url 'expenses:category-edit' obj.id %}">edit</a>
 				<a href="{% url 'expenses:category-delete' obj.id %}">delete</a>
Index: expenses/templates/expenses/expense_list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/expenses/templates/expenses/expense_list.html b/expenses/templates/expenses/expense_list.html
--- a/expenses/templates/expenses/expense_list.html	(revision 0c37ce300837c7a3f691c1177680aa0ae908c0c3)
+++ b/expenses/templates/expenses/expense_list.html	(revision 551db2262edc96dfbdf669d431cf51619cbb6f6f)
@@ -2,58 +2,86 @@
 
 {% block content %}
 
-<a href="{% url 'expenses:expense-create' %}">add</a>
-
-<form method="get" action="">
-  {{form.as_p}}
-  <button type="submit">search</button>
-</form>
+<a href="{% url 'expenses:expense-create' %}">add expense</a>
+<br>
+  <form method="get" action="">
+    {{form.as_p}}
+    <button type="submit">search</button>
+  </form>
 <br>
-<table border="1">
+<hr>
+  <p><a href="?{{ request.GET.urlencode }}&sort_by=category">Sort by category (ASC)</a></p>
+  <p><a href="?{{ request.GET.urlencode }}&sort_by=-category">Sort by category (DESC)</a></p>
+  <p><a href="?{{ request.GET.urlencode }}&sort_by=date">Sort by date (ASC)</a></p>
+  <p><a href="?{{ request.GET.urlencode }}&sort_by=-date">Sort by date (DESC)</a></p>
+<br>
+<hr>
+<table border="1" style="text-align: center;">
 	<caption>Expenses</caption>
-	<thead>
-	  <tr>
-		<th>no.</th>
-		<th>category</th>
-		<th>name</th>
-		<th>amount</th>
-		<th>date</th>
-		<th>actions</th>
-	  </tr>
-	</thead>
+    <thead>
+      <tr>
+        <th>no.</th>
+        <th>category</th>
+        <th>name</th>
+        <th>amount</th>
+        <th>date</th>
+        <th>actions</th>
+      </tr>
+    </thead>
 	<tbody>
-
-	{% for obj in object_list %}
-	  <tr>
-		<td>{{ page_obj.start_index|add:forloop.counter0 }}.</td>
-		<td>{{ obj.category|default:"-" }}</td>
-		<td>{{ obj.name|default:"-" }}</td>
-		<td>{{ obj.amount|floatformat:2 }}</td>
-		<td>{{obj.date}}</td>
-		<td>
-		  <a href="{% url 'expenses:expense-edit' obj.id %}">edit</a>
-		  <a href="{% url 'expenses:expense-delete' obj.id %}">delete</a>
-		</td>
-	  </tr>
-	  {% empty %}
-	  <tr>
-		<td colspan="5">no items</td>
-	  </tr>
-	{% endfor %}
+    {% for obj in object_list %}
+      <tr>
+        <td>{{ page_obj.start_index|add:forloop.counter0 }}.</td>
+        <td>{{ obj.category|default:"-" }}</td>
+        <td>{{ obj.name|default:"-" }}</td>
+        <td>{{ obj.amount|floatformat:2 }}</td>
+        <td>{{obj.date}}</td>
+        <td>
+          <a href="{% url 'expenses:expense-edit' obj.id %}">edit</a>
+          <a href="{% url 'expenses:expense-delete' obj.id %}">delete</a>
+        </td>
+      </tr>
+      {% empty %}
+      <tr>
+        <td colspan="5">no items</td>
+      </tr>
+    {% endfor %}
 	</tbody>
 </table>
-
 {% include "_pagination.html" %}
+<br>
 <hr>
-<table border="1">
+<table border="1" style="text-align: center;">
   <caption>Summary per category</caption>
-  <tr>
     {% for category, total in summary_per_category.items %}
 	<tr>
 		<td>{{category}}:</td>
 		<td>{{total|floatformat:2}}</td>
 	</tr>
 	{% endfor %}
-  </tr>
+</table>
+<br>
+<hr>
+<table border="1" style="text-align: center;">
+  <caption>Summary per year-month</caption>
+    <thead>
+      <tr>
+          <th>year</th>
+          <th>month</th>
+          <th>summary spent</th>
+      </tr>
+    </thead>
+    <tbody>
+    {% for item in summary_per_year_month %}
+      <tr>
+        <td>{{ item.year }}</td>
+        <td>{{ item.month }}</td>
+        <td>{{ item.total|floatformat:2 }}</td>
+      </tr>
+    {% endfor %}
+    </tbody>
 </table>
+<br>
+<hr>
+  <p>Total amount spent: {{ total_amount_spent|floatformat:2 }}</p>
 {% endblock %}
Index: expenses/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/expenses/tests.py b/expenses/tests.py
--- a/expenses/tests.py	(revision 0c37ce300837c7a3f691c1177680aa0ae908c0c3)
+++ b/expenses/tests.py	(revision 551db2262edc96dfbdf669d431cf51619cbb6f6f)
@@ -1,3 +1,293 @@
 from django.test import TestCase
+from django.urls import reverse
+from datetime import date
+from .models import Expense, Category
+from .reports import summary_per_category
+from .forms import ExpenseSearchForm
+
+
+class ViewsTests(TestCase):
+    def setUp(self):
+        self.category1 = Category.objects.create(name='Test Category 1')
+        self.category2 = Category.objects.create(name='Test Category 2')
+        self.category3 = Category.objects.create(name='Test Category 3')
+
+        Expense.objects.create(
+            name='Expense 1',
+            date=date(2097, 12, 5),
+            amount=10,
+            category=self.category1
+        )
 
-# Create your tests here.
+        Expense.objects.create(
+            name='Expense 2',
+            date=date(1997, 12, 5),
+            amount=20,
+            category=self.category2
+        )
+
+        Expense.objects.create(
+            name='Expense 3',
+            date=date(1897, 12, 5),
+            amount=20,
+            category=self.category3
+        )
+
+    def test_expense_list_view(self):
+        response = self.client.get(reverse('expenses:expense-list'))
+
+        self.assertEqual(response.status_code, 200)
+        self.assertIn('object_list', response.context)
+        self.assertIn('total_amount_spent', response.context)
+        self.assertIn('form', response.context)
+        self.assertIn('summary_per_category', response.context)
+        self.assertIn('summary_per_year_month', response.context)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            Expense.objects.all(),
+        )
+
+    def test_expense_list_view_with_filter_by_name(self):
+        data = {'name': 'Expense 3'}
+        response = self.client.get(reverse('expenses:expense-list'), data)
+        expected_queryset = Expense.objects.filter(name='Expense 3')
+
+        self.assertEqual(response.status_code, 200)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_queryset,
+        )
+
+    def test_expense_list_view_with_filter_by_date_from(self):
+        data = {'date_from': date.today()}
+        response = self.client.get(reverse('expenses:expense-list'), data)
+        expected_queryset = Expense.objects.filter(date__gte=date.today())
+
+        self.assertEqual(response.status_code, 200)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_queryset,
+        )
+
+    def test_expense_list_view_with_filter_by_date_to(self):
+        data = {'date_to': date.today()}
+        response = self.client.get(reverse('expenses:expense-list'), data)
+        expected_queryset = Expense.objects.filter(date__lte=date.today())
+
+        self.assertEqual(response.status_code, 200)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_queryset,
+        )
+
+    def test_expense_list_view_with_filter_by_category(self):
+        data = {'category': self.category1.id}
+        response = self.client.get(reverse('expenses:expense-list'), data)
+        expected_queryset = Expense.objects.filter(category=self.category1.id)
+
+        self.assertEqual(response.status_code, 200)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_queryset,
+        )
+
+    def test_expense_list_view_with_filter_by_categories(self):
+        data = {'category': [self.category1.id, self.category2.id]}
+        response = self.client.get(reverse('expenses:expense-list'), data)
+        expected_queryset = Expense.objects.filter(
+            category__in=data['category']
+        )
+
+        self.assertEqual(response.status_code, 200)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_queryset,
+        )
+
+    def test_sort_by_category_asc(self):
+        response = self.client.get(
+            reverse('expenses:expense-list'), {'sort_by': 'category'}
+        )
+        expected_data = [
+            str(expense) for expense in Expense.objects.order_by('name')
+        ]
+
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_data,
+            transform=lambda x: str(x)
+        )
+
+    def test_sort_by_category_desc(self):
+        response = self.client.get(
+            reverse('expenses:expense-list'), {'sort_by': '-category'}
+        )
+        expected_data = [
+            str(expense) for expense in Expense.objects.order_by('-name')
+        ]
+
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_data,
+            transform=lambda x: str(x)
+        )
+
+    def test_sort_by_date_asc(self):
+        response = self.client.get(
+            reverse('expenses:expense-list'), {'sort_by': 'date'}
+        )
+        expected_data = [
+            str(expense) for expense in Expense.objects.order_by('date')
+        ]
+
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_data,
+            transform=lambda x: str(x)
+        )
+
+    def test_sort_by_date_desc(self):
+        response = self.client.get(
+            reverse('expenses:expense-list'), {'sort_by': '-date'}
+        )
+        expected_data = [
+            str(expense) for expense in Expense.objects.order_by('-date')
+        ]
+
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_data,
+            transform=lambda x: str(x)
+        )
+
+    def test_category_list_view(self):
+        response = self.client.get(reverse('expenses:category-list'))
+        expected_queryset = Category.objects.all()
+
+        self.assertEqual(response.status_code, 200)
+        self.assertIn('object_list', response.context)
+        self.assertIn('paginator', response.context)
+        self.assertIn('page_obj', response.context)
+        self.assertIn('is_paginated', response.context)
+        self.assertQuerysetEqual(
+            response.context['object_list'],
+            expected_queryset,
+            ordered=False
+        )
+
+    def test_summary_per_category(self):
+        queryset = Expense.objects.all()
+        result = summary_per_category(queryset)
+        expected_result = {
+            'Test Category 1': 10,
+            'Test Category 2': 20,
+            'Test Category 3': 20
+        }
+
+        self.assertEqual(result, expected_result)
+
+    def test_summary_per_category_empty_queryset(self):
+        queryset = Expense.objects.none()
+        result = summary_per_category(queryset)
+
+        self.assertEqual(result, {})
+
+    def test_summary_per_category_with_filter(self):
+        queryset = Expense.objects.filter(category=self.category1)
+        result = summary_per_category(queryset)
+        expected_result = {
+            'Test Category 1': 10,
+        }
+
+        self.assertEqual(result, expected_result)
+
+
+class ExpenseSearchFormTests(TestCase):
+    def setUp(self):
+        self.category1 = Category.objects.create(name='Test Category 1')
+        self.category2 = Category.objects.create(name='Test Category 2')
+        self.category3 = Category.objects.create(name='Test Category 3')
+
+        Expense.objects.create(
+            name='Expense 1',
+            date=date(2097, 12, 5),
+            amount=10,
+            category=self.category1
+        )
+
+        Expense.objects.create(
+            name='Expense 2',
+            date=date(1997, 12, 5),
+            amount=20,
+            category=self.category2
+        )
+
+        Expense.objects.create(
+            name='Expense 3',
+            date=date(1897, 12, 5),
+            amount=20,
+            category=self.category3
+        )
+
+    def test_form_with_valid_data(self):
+        form_data = {
+            'name': 'Expense 1',
+            'date_from': '2097-12-01',
+            'date_to': '2097-12-10',
+            'category': [self.category1.id]
+        }
+        form = ExpenseSearchForm(data=form_data)
+
+        self.assertTrue(form.is_valid())
+
+    def test_form_with_empty_data(self):
+        form_data = {}
+        form = ExpenseSearchForm(data=form_data)
+
+        self.assertTrue(form.is_valid())
+
+    def test_form_with_invalid_data(self):
+        form_data = {
+            'name': 'Expense 1',
+            'date_from': 'invalid_date',
+            'date_to': 'invalid_date',
+            'category': 'invalid_category'
+        }
+        form = ExpenseSearchForm(data=form_data)
+
+        self.assertFalse(form.is_valid())
+        self.assertIn('date_from', form.errors)
+        self.assertIn('date_to', form.errors)
+        self.assertIn('category', form.errors)
+
+    def test_form_with_valid_category_ids(self):
+        form_data = {
+            'name': 'Expense 1',
+            'date_from': '2097-12-01',
+            'date_to': '2097-12-10',
+            'category': [self.category1.id, self.category2.id]
+        }
+        form = ExpenseSearchForm(data=form_data)
+
+        self.assertTrue(form.is_valid())
+
+        selected_categories = Category.objects.filter(
+            id__in=form.cleaned_data['category']
+        )
+        category_ids = list(selected_categories.values_list('id', flat=True))
+
+        self.assertEqual(
+            category_ids, [self.category1.id, self.category2.id]
+        )
+
+    def test_form_with_invalid_category_ids(self):
+        form_data = {
+            'name': 'Expense 1',
+            'date_from': '2097-12-01',
+            'date_to': '2097-12-10',
+            'category': [100, 200]
+        }
+        form = ExpenseSearchForm(data=form_data)
+
+        self.assertFalse(form.is_valid())
+        self.assertIn('category', form.errors)
Index: expenses/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/expenses/views.py b/expenses/views.py
--- a/expenses/views.py	(revision 0c37ce300837c7a3f691c1177680aa0ae908c0c3)
+++ b/expenses/views.py	(revision 551db2262edc96dfbdf669d431cf51619cbb6f6f)
@@ -1,7 +1,9 @@
+from django.db.models import Sum, Count
+from django.db.models.functions import ExtractYear, ExtractMonth
 from django.views.generic.list import ListView
 
-from .forms import ExpenseSearchForm
 from .models import Expense, Category
+from .forms import ExpenseSearchForm
 from .reports import summary_per_category
 
 
@@ -11,20 +13,80 @@
 
     def get_context_data(self, *, object_list=None, **kwargs):
         queryset = object_list if object_list is not None else self.object_list
-
+        total_amount_spent = queryset.aggregate(total=Sum('amount'))['total']
         form = ExpenseSearchForm(self.request.GET)
+
         if form.is_valid():
-            name = form.cleaned_data.get('name', '').strip()
-            if name:
-                queryset = queryset.filter(name__icontains=name)
+            queryset = self.apply_filters(queryset, form.cleaned_data)
+            queryset = self.apply_sorting(
+                queryset, self.request.GET.get('sort_by', '')
+            )
+
+        summary_per_year_month = self.calculate_summary_per_year_month(queryset)
 
         return super().get_context_data(
             form=form,
             object_list=queryset,
+            total_amount_spent=total_amount_spent,
             summary_per_category=summary_per_category(queryset),
-            **kwargs)
+            summary_per_year_month=summary_per_year_month,
+            **kwargs
+        )
+
+    @staticmethod
+    def apply_filters(queryset, cleaned_data):
+        name = cleaned_data.get('name', '').strip()
+        date_from = cleaned_data.get('date_from')
+        date_to = cleaned_data.get('date_to')
+        category = cleaned_data.get('category')
+
+        if name:
+            queryset = queryset.filter(name__icontains=name)
+
+        if date_from:
+            queryset = queryset.filter(date__gte=date_from)
+
+        if date_to:
+            queryset = queryset.filter(date__lte=date_to)
+
+        if category:
+            queryset = queryset.filter(category__in=category)
+
+        return queryset
+
+    @staticmethod
+    def apply_sorting(queryset, sort_by):
+        if sort_by == 'category':
+            return queryset.order_by('category')
+
+        elif sort_by == '-category':
+            return queryset.order_by('-category')
+
+        elif sort_by == 'date':
+            return queryset.order_by('date')
+
+        elif sort_by == '-date':
+            return queryset.order_by('-date')
+
+        return queryset
+
+    @staticmethod
+    def calculate_summary_per_year_month(queryset):
+        return (
+            queryset
+            .annotate(year=ExtractYear('date'), month=ExtractMonth('date'))
+            .values('year', 'month')
+            .annotate(total=Sum('amount'))
+            .order_by('year', 'month')
+        )
+
 
 class CategoryListView(ListView):
     model = Category
     paginate_by = 5
 
+    def get_queryset(self):
+        queryset = super().get_queryset()
+        queryset = queryset.annotate(num_expenses=Count('expense'))
+
+        return queryset
